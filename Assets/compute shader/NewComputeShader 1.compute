// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel CSMain2

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
//RWTexture2D<float4> Result;
RWTexture2D<float4> tex;

int modOff;

float4 boxFold(float4 v)
{
	if (v.x > 1 )
		v.x =  2 - v.x;
	else if (v.x < -1)
		v.x = -2 - v.x;
		
	if (v.z > 1 )
		v.z =  2 - v.z;
	else if( v.z < -1)
		v.z = -2 - v.z;

	return v;
}

float4 ballFold(float r, float4 v)
{
	float m = sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
	if (m < r)
		m = m/(r*r);
	else if (m < 1 )
		m = 1/(m*m);
	return v;
}

float DE(float3 z)
{
	float Scale = 2;
	float Offset = 1;
	int Iterations = 5;
    float r;
    int n = 0;
    while (n < Iterations) {
       if(z.x+z.y<0) z.xy = -z.yx; // fold 1
       if(z.x+z.z<0) z.xz = -z.zx; // fold 2
       if(z.y+z.z<0) z.zy = -z.yz; // fold 3	
       z = z*Scale - Offset*(Scale-1.0);
       n++;
    }
    return (length(z) ) * pow(Scale, -float(n));
}
float DE2(float3 pos) {

	int Iterations = 5;
	float3 z = pos;
	float dr = 1.0;
	float r = 0.0;
	float Power = 1;
	float Bailout = 100;

	for (int i = 0; i < Iterations ; i++) {
		r = length(z);
		if (r>Bailout) break;
		
		// convert to polar coordinates
		float theta = acos(z.z/r);
		float phi = atan(z.yx);
		dr =  pow( r, Power-1.0)*Power*dr + 1.0;
		
		// scale and rotate the point
		float zr = pow( r,Power);
		theta = theta*Power;
		phi = phi*Power;
		
		// convert back to cartesian coordinates
		z = zr*float3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));
		z+=pos;
	}
	return 0.5*log(r)*r/dr;
}

float trace(float3 from, float3 direction) {
	float totalDistance = 0.0;
	int steps;
	int MaximumRaySteps = 10;
	int MinimumDistance = 0.1;

	for (steps=0; steps < MaximumRaySteps; steps++) {
		float3 p = from + totalDistance * direction;
		float distance = DE2(p);
		totalDistance += distance;
		if (distance < MinimumDistance) break;
	}
	return 1.0-float(steps)/float(MaximumRaySteps);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float w, h;
    tex.GetDimensions(w, h);

	float c = 0.234;
	float s = 2;
	float r = 0.5;
	float f = 1;
	float4 o = float4(id.x,id.y,id.z,1);

	for(int x = 0; x < 50; x++)
	{
		o = s * ballFold(r, f*boxFold(o)) + c;
	}
	tex[id.xy] = o;
	//if(id.y % 10 == modOff || id.x % 10 == modOff)
	//	tex[id.xy] = float4( (id.x)/w, 1, (w -id.x) /w,1);
	//else if(id.x == 7)
	//	tex[id.xy] = float4(1,1,1,1);
	//else
	//	tex[id.xy] = 0;
}

[numthreads(8,8,1)]
void CSMain2 (uint3 id : SV_DispatchThreadID)
{
	tex[id.xy] = trace(id, float3(0,0,1));
}
