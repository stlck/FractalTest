// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel boxFold
#pragma kernel ballFold

struct Vert
{
    float3 position;
    float3 color;
};

//RWTexture2D<float4> Result;
Buffer<float3> data;
int count;

float3 boxFold(float3 v)
{
	if (v.x > 1 )
		v.x =  2 - v.x;
	else if (v.x < -1)
		v.x = -2 - v.x;
		
	if (v.z > 1 )
		v.z =  2 - v.z;
	else if( v.z < -1)
		v.z = -2 - v.z;

	return v;
}

float3 ballFold(float r, float3 v)
{
	float m = sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
	if (m < r)
		m = m/(r*r);
	else if (m < 1 )
		m = 1/(m*m);
	return v;
}

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
//	float w, h;
	//float4 o = float4(1,1,1,1);
	
	float c = 0.234;
	float s = 2;
	float r = 0.5;
	float f = 1;

	for(int i = 0; i < 10; i++)
	{
		for(int x = 0; x < count; x++)
		{
			float3 o = data.Load(x);
			o = s * ballFold(r, f*boxFold(o)) + c;
		}
	}

	//o[x] = s * ballFold(r, f*boxFold(o[x])) + c;

    //Result[id.xy] = o;
	//float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}